抽象类：
	特点：
	1.方法只有声明没有实现时，该方法就是抽象方法，需要被abstract修饰
	2.抽象方法必须定义在抽象类中，抽象类中可以有抽象方法，也可以没有抽象方法。
	3.抽象类不可以实例化，因为调用抽象方法没有意义。
	4.抽象类必须有其子类覆盖了所有抽象方法后，该子类才可以实例化，否则这个子类还是抽象类
注意：
	1.抽象类中有构造函数，用于给子类对象进行初始化。
	2.抽象类可以不定义抽象方法，很少见目的是不让该类创建对象，
	  AWT的适配器对象就是这种类。通常这个类中的方法有方法体，但是没有内容
	3.抽象关键字不可以和哪些修饰关键字共存
		private:私有后子类就不能覆盖抽象类的所有方法
		static:抽象方法调用没意义
		final:
	4.抽象类和一般类的异同点
		相同点：
			抽象类和一般类都是用来描述事物的，都在内中定义了成员
		不同：
			1,一般
	5.抽象类一定是个父类，因为需要子类覆盖其方法后才能被实例化
接口：
	当一个抽象类中所以方法都是抽象方法，这时可以将该抽象类用另一种形式定义和表示，就是接口。（interface）
	定义接口的关键字是interface
接口当中的成员都有固定的修饰符：
	全局常量：public static final
	抽象方法：public abstract
注意：
	1.接口中默认都会加上修饰符，可以省略这些修饰符，但是为了阅读性都要加上修饰符
	2.类与类之间是继承关系extends，类与接口之间是实现关系implements
	3.接口不可以实例化，只能由实现了的子类覆盖了所有抽象方法后才能实例化
	4.一个类在继承另一个类的同时，还可以实现多个类
	5.其实java中是有多继承的。接口与接口之间存在着继承关系，接口可以多继承接口
		因为接口没有方法体，当有重名时覆盖哪个方法都是一样的
接口的特点：
	接口是对外暴露的规则
	接口是程序的功能扩展
	接口的出现降低耦合性
	接口可以用来多实现
接口和抽象类的区别：
	1.抽象需要被继承，只能单继承
	  接口需要被实现，可以多实现
	2.抽象类中可以定义抽象方法和非抽象方法，子类继承后可以直接使用非抽象方法
	  接口中只能定义抽象方法，必须由子类区实现
	3.抽象类的继承是is a关系，定义的是这个体系的共性功能。
	  接口的实现时like a关系，定义体系的额外功能。
