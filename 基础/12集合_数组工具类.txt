集合工具类：所有的方法都是静态方法
	Collections：
		排序：
			static void  <T extends Comparable<? super T>> sort(List<T> list)： 根据元素的自然顺序 对指定列表按升序进行排序。
			static <T> void sort(List<T> list, Comparator<? super T> c)  ：根据指定比较器产生的顺序对指定列表进行排序。
			static void swap(List<?> list, int i, int j) :交换位置
		查找：
			static <T> int binarySearch(List<? extends Comparable<? super T>> list, T key) ：使用二分搜索法搜索指定列表，以获得指定对象。
				在进行此调用之前，必须根据列表元素的自然顺序对列表进行升序排序（通过 sort(List) 方法）。如果没有对列表进行排序，则结果是不确定的。如果列表包含多个等于指定对象的元素，则无法保证找到的是哪一个。
					如果搜索键包含在列表中，则返回搜索键的索引；否则返回 (-(插入点) - 1)。插入点 被定义为将键插入列表的那一点：即第一个大于此键的元素索引；如果列表中的所有元素都小于指定的键，则为 list.size()。 
			static <T> int binarySearch(List<? extends T> list, T key, Comparator<? super T> c) ：使用二分搜索法搜索指定列表，以获得指定对象。
				在进行此调用之前，必须根据指定的比较器对列表进行升序排序（通过 sort(List, Comparator) 方法）。如果没有对列表进行排序，则结果是不确定的。如果列表包含多个等于指定对象的元素，则无法保证找到的是哪一个。
					如果搜索键包含在列表中，则返回搜索键的索引；否则返回 (-(插入点) - 1)。插入点 被定义为将键插入列表的那一点：即第一个大于此键的元素索引；如果列表中的所有元素都小于指定的键，则为 list.size()。 
 			static <T extends Object & Comparable<? super T>> T max(Collection<? extends T> coll) :根据元素的自然顺序，返回给定 collection 的最大元素。
 			static <T> T max(Collection<? extends T> coll, Comparator<? super T> comp) :根据指定比较器产生的顺序，返回给定 collection 的最大元素。
 			static <T extends Object & Comparable<? super T>> T min(Collection<? extends T> coll) :根据元素的自然顺序 返回给定 collection 的最小元素。 
 			static <T> T min(Collection<? extends T> coll, Comparator<? super T> comp) :根据指定比较器产生的顺序，返回给定 collection 的最小元素。 
 		反转：
 			static void reverse(List<?> list) ： 反转指定列表中元素的顺序。
 			static <T> Comparator<T> reverseOrder() ：返回自然顺序的逆序的比较器 
 			static <T> Comparator<T> reverseOrder(Comparator<T> cmp) ：返回指定比较器的逆序比较器
 		修改：
 			static <T> boolean replaceAll(List<T> list, T oldVal, T newVal) ：使用另一个值替换列表中出现的所有某一指定值。
 			<T> void fill(List<? super T> list, T obj)： 使用指定元素替换指定列表中的所有元素。 
 			static void shuffle(List<?> list) ：使用默认随机源对指定列表进行置换。
 		
 Arrays工具类：数组工具类
 		public static <T> List<T> asList(T... a)：将数组转成list集合（重点掌握）
 			好处：可以使用集合的方法操作数组
 			注意：1.因为数组的长度是固定的，转成集合后不可以增删集合否则会发生UnsupportedOperationException(可以修改)
 				 2.如果数组中的元素是对象，转成集合时，直接将数组中的元素作为集合中的元素进行存储
 				       如果数组中的元素是基本数据类型，会将该数组作为集合中的元素进行存储，为了存储基本数据类型，数组可以写成Integer[]
集合转数组：
	可以对集合中的元素操作的方法进行限定，不允许对其进行增删
	使用的是Collection接口中的toArray方法。
	Object[] toArray() ：返回包含此 collection 中所有元素的数组（类型进行了提升）
	<T> T[] toArray(T[] a) ：传入一个指定类型的数组，如果指定的数组的长度小于了集合的size，会返回一个集合长度的数组，如果长度大于了集合的长度，会返回指定的长度，建议使用和集合一样的长度
增强for循环（ForEach语句）：
	格式：for(类型 变量：Collection集合or数组){}
		底层用的是迭代器
传统for和增强for的区别：
	1.传统for可以完成对语句执行很多次，因为可以定义控制循环的增量和条件
		高级for是一种简化形式，它必须有被遍历的目标，该目标要么是数组，要么是单列集合
	2.对数组的遍历如果仅仅是获取数组中的元素，可以使用增强for，如果要对数组的角标进行操作建议使用传统for
	3.对于Map集合可以先转成set集合在用增强for循环
给非同步的集合加锁：
 			static <T> Collection<T> synchronizedCollection(Collection<T> c) :
 			static <T> List<T> synchronizedList(List<T> list) :
 			static <K,V> Map<K,V> synchronizedMap(Map<K,V> m) :
 			static <T> Set<T> synchronizedSet(Set<T> s):

	 				    
 	
 	
 
 
 			
 
  
 
 
