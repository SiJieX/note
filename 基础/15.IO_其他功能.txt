SequenceInputStream：
	序列流，作用就是将多个读取流合并成一个读取流。实现数据合并。
		表示其他输入流的逻辑串联。它从输入流的有序集合开始，并从第一个输入流开始读取，直到到达文件末尾，接着从第二个输入流读取，依次类推，直到到达包含的最后一个输入流的文件末尾为止。
		这样做，可以更方便的操作多个读取流，其实这个序列流内部会有一个有序的集合容器，用于存储多个读取流对象。
		该对象的构造函数参数是枚举，想要获取枚举，需要有Vector集合，但不高效。需用ArrayList，但ArrayList中没有枚举，只有自己去创建枚举对象。
		但是方法怎么实现呢？因为枚举操作的是具体集合中的元素，所以无法具体实现，但是枚举和迭代器是功能一样的，所以，可以用迭代替代枚举。
		可以用工具类Collections中的静态方法：
					static <T> Enumeration<T> enumeration(Collection<T> c)
					将流对象存储到集合中通过工具类方法获得枚举对象 
 	构造方法：
 		SequenceInputStream(Enumeration<? extends InputStream> e)
 				可以用工具类Collections中的静态方法：将流对象存储到集合中通过工具类方法获得枚举对象  
					static <T> Enumeration<T> enumeration(Collection<T> c)
 		SequenceInputStream(InputStream s1, InputStream s2) ：只能有两个流对象
合并原理：多个读取流对应一个输出流。
切割原理：一个读取流对应多个输出流。
ObjectInputStream ObjectOutputStream 类：用于对对象的持久化
	构造方法：
		ObjectInputStream(InputStream in) ：
		ObjectOutputStream(OutputStream out) ：
对象的序列化：
	目的：将一个具体的对象进行持久化，写入到硬盘上。
	注意：静态数据不能被序列化，因为静态数据不在堆内存中，是存储在静态方法区中。
		如何将非静态的数据不进行序列化？用transient 关键字修饰此变量即可。
Serializable接口：
	用于启动对象的序列化功能，可以强制让指定类具备序列化功能，该接口中没有成员，这是一个标记接口。
	这个标记接口用于给序列化类提供UID。这个uid是依据类中的成员的数字签名进行运行获取的。
	如果不需要自动获取一个uid，可以在类中，手动指定一个名称为serialVersionUID id号。
	注意：
		1.依据编译器的不同，或者对信息的高度敏感性。最好每一个序列化的类都进行手动显示的UID的指定。
		2.通过ObjectInputStream/ ObjectOutputStream将对象持久化对象必须实现Serializable接口
			