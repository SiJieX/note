
进程：
	正在进行的程序（直译）一个进程中至少有一个线程
线程：
	进程中一个负责程序执行的控制单元（执行路径）
多线程：
	一个进程中可以有多执行路径，称之为多线程。开启多个线程是为了同时运行多部分的代码。
多线程的好处：
	解决了多部分同时运行的问题
        弊端：
	其实应用程序的执行都是cpu在做着快速的切换完成的（线程一开多，程序就会运行缓慢），这个切换时随机的。
jvm中的线程的解析：
	启动后，至少有两个线程
		1.执行main函数的线程，
			该线程的任务代码都定义在main函数中
		2.负责垃圾回收的线程
			为什么不立即回收：这样就会和主线程抢夺cup执行权，影响执行效率
		3.随机性的原理：因为cpu的快速切换造成，哪个线程获取了cpu的执行权，哪个线程就执
		4.一个进程至少有一个线程在运行，每个线程在栈区中都有自己的执行空间，自己的方法区，自己的变量
创建线程的第一种方式：
	步骤：
		1，定义类继承Thread类；
		2，覆写run方法，将要让线程运行的代码都存储到run方法中；
		3，通过创建Thread的子类对象，创建线程对象；
		4，调用线程的start方法，开启线程，并执行run方法
			start方法： 1，启动了线程；
					  2，让jvm调用了run方法。
为什么不直接创建thread对象：
	因为要开启的线程要有执行的内容，Thread类有开启线程的功能，而要在新线程里运行的代码在子类里。
Thread:
	构造方法：
		Thread(String name):子类构造函数里可以调用super(name),给线程取名字.
		Thread(Runnable target):开启线程第二种方式用到
	一般方法：
		String getName():返回该线程的名称
		static Thread currentThread():当前正在执行的线程对象的引用。
		void start() ：使该线程开始执行；Java 虚拟机调用该线程的 run 方法。（多次启动一个线程是非法的，会抛出IllegalThreadStateException ）
		static void sleep(long millis)  ：使当前线程
执行资格：
	可以被cpu处理，正在排队等待处理
执行权：
	正在被cpu处理
线程状态：
	1.被创建：start()
	2.运行：具备执行资格，同时具备执行权；
	3.冻结：sleep(time),wait(),notify()唤醒；线程释放了执行权，同时释放执行资格；
	4.临时阻塞状态：线程具备cpu的执行资格，没有cpu的执行权；
	5.消亡：stop()
创建线程的第二种方式：
	由于java只能单继承，如果一个类已经有了父类，第一种开启线程的方式就会有局限性。
	1.定义类实现Runnable接口
	2.定义的类中实现Runnable接口的run方法，将要执行的代码放入run方法中
	3.创建Thread对象，同时同过Thread的构造方法传入定义的类的对象
	4.调用Thread对象的start方法
第二种方式的好处：
	1.将线程的任务从线程的子类中分离出来（因为继承Thread类，就具备了Thread类的所用功能），进行了单独的封装.
		按照面向对象的思想将任务封装成对象。
	2.避免了单继承的局限性
	3.可以开启多个线程对同一个对象进行的任务进行执行
线程安全问题产生的原因：
	1.多个线程在操作共享的数据
	2.操作共享数据的代码有多条
		当一个线程操作完第一条语句时，切换出去执行其他程序了，另一线程操作下一条语句时改变了数据，第一个线程回来继续操作时数据已经改变。
解决安全问题的原理：
	只要将操作共享数据的语句在某一时段让一个线程执行完，在执行过程中，其他线程不能进来执行就可以解决这个问题。
同步的第一种方式：
	同步代码块：解决线程安全的问题
		格式：
			synchronized(对象) {  // 任意对象都可以。这个对象就是锁。
				需要被同步的代码；
			}
		原理：当第一个线程进去执行完后，另一个线程才能进去
同步的好处与弊端：
	好处:
		解决了线程的安全
	弊端：
		因为同步外的线程都要判断锁，相对降低效率,有可能产生死锁
同步的前提：
	1.必须有多个线程
	2.多个线程使用同一个锁（同步代码块里的对象要在成员变量里定义，在run方法外）
同步的第二种方式：
	将同步关键字定义在函数上，让函数具备了同步性。
	注意： 1.同步函数所使用的锁是this，同步代码块使用的锁任意对象。（建议使用同步代码块）
		 2.静态同步函数的锁：该类的字节码文件。类名.class或对象.getClass();
		 3. 用Object对象时不是一个锁，可以写成
		 	public static final Object locka=new Object();
		 	用public static final修饰
单例设计模式涉及的多线程问题：
	懒汉式涉及的共享数据的操作不止一个语句，存在线程安全的问题
	第一种解决方式：
		public class lazySingle{
			private static lazySingle s = null;
			private lazySingle(){}
			public staitc synchronized lazySingle getInstance(){//同步函数但是每次调用该方法得到对象都要判断锁降低了效率
				if(s==null){//共享数据的操作不止一个语句
					s = new lazySingle();
				}
				return s;
			}
		}
	第二种解决方式：
		public class lazySingle{
			private static lazySingle s = null;
			private lazySingle(){}
			public staitc  lazySingle getInstance(){
				if(s==null){//这样就提高了效率，只有第一次调用时会判断锁。
					synchronized(lazySingle.class){
						if(s==null){
							s = new lazySingle();
						}
						return s;
					}
				}	
			}
		}
死锁：
	通常只要将同步进行嵌套，就可以看到现象。同步函数中有同步代码块，同步代码块中还有同步函数。
线程间的通信：
	思路：多个线程在操作同一个资源，但是操作的动作却不一样。
		1：将资源封装成对象。
		2：将线程执行的任务(任务其实就是run方法。)也封装成对象。
等待/唤醒机制设计的方法：
	1.wait():让线程处于冻结状态，被wait的线程会被存储到线程池中（失去了执行权和执行资格）
	2.notify()：唤醒持有相同锁的线程池中的一个线程（任意）
	3.notifyAll：唤醒持有相同锁的线程池中的所有线程。（用于解决多生产者和多消费者用notify()产生死锁的问题）
注意：1.这些方法都必须定义在同步中。
	      因为这些方法是用于操作线程状态的方法，必须要明确到底操作的是哪个锁上的线程
	2.这些方法定义在Object类中的原因：
	      因为这些方法是监视器的方法（锁），锁是任意对象，因此应该定义在Object类中
	3.java.lang.IllegalMonitorStateException:
		违法的监控状态异常。当某个线程试图等待一个自己并不拥有的对象（O）的监控器或者通知其他线程等待该对象（O）的监控器时，抛出该异常。
	4.wait方法前必须用 监视器.wait();
	  notify方法前必须用 监视器.notify();
多生产者多消费者问题：
	为了避免产生死锁现象，用notifyAll()唤醒所有的锁
JDK1.5新特性：
	将锁封装成了对象：
		Lock接口：替代同步代码块和同步函数（同步是隐示的锁操作，而Lock对象是显示的锁操作）
				 同时一个锁上可以加上多组监视器
			方法：
				1.void lock() ：获取锁
				2.void unlock() ： 释放锁
			用法：Lock lock = new ReentrantLock();
				 lock.lock;
				 code....
				 finally{
						lock.unlock();//放在finally代码块中，出现异常时必须释放锁
				 }
		Condition接口：替代了Object中的wait(),notify(),notifyAll()方法
			方法：
				await();替代了Object中的wait()方法
				signal();替代了Object中的notify()方法
				signalAll();替代了Object中的notifyAll()方法
wait()和sleep()的区别：
	1.wait可以指定时间也可以不指定时间
	  sleep必须指定时间
	2.对cpu的执行权和锁的处理不同
		wait:释放执行权，释放锁
		sleep:释放执行权，不释放锁
停止线程的方式：
	1.stop方法（已过时，存在安全隐患，不使用）
	2.run方法结束
		1.在while循环中定义标记
		2.void interrupt() 
 
			
 
	
	
		

		
		
		
		
		
		
		
		
		
		

	