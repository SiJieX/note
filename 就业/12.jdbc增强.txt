批处理
	很多时候，需要批量执行sql语句！
	需求：批量保存信息！  
	|-- Statement
		批处理相关方法
		void addBatch(String sql)：添加批处理
		int[] executeBatch()：执行批处理
		void clearBatch()：清空批处理（执行了批量处理后，要清空后，再添加批处理）
插入数据，获取自增长值(有外键关联时使用)：
	步骤： 1.在实体类中引用外键的对象
		 2.在预编译对象中标记要返回自增长值
			ps = con.prepareStatement(sqlGrade, PreparedStatement.RETURN_GENERATED_KEYS);
		 3.获取自增长值的结果集
		 	rs = ps.getGeneratedKeys();
事务
	基本概念：
		事务使指一组最小逻辑操作单元，里面由多个操作组成。 组成事务的每一部分必须要同时提交成功，如果有一个操作失败，整个操作就回滚。
	事务ACID特性
		原子性（Atomicity）
			原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。 
		一致性（Consistency）
			事务必须使数据库从一个一致性状态变换到另外一个一致性状态。
		隔离性（Isolation）
			事务的隔离性是多个用户并发访问数据库时，数据库为每一个用户开启的事务，不能被其他事务的操作数据所干扰，多个并发事务之间要相互隔离。
		持久性（Durability）
		 	持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来即使数据库发生故障也不应该对其有任何影响
	步骤：
		1.设置为手动提交事务
			void con.setAutoCommit(false)
		2.如果需要设置回滚点，可以设置回滚点
			Savepoint setSavepoint()
		3.在catch代码块回滚事务
			void con.rollback()或
			void rollback(Savepoint s)
		4.在finally代码块提交事务
			void con.commit()
Jdbc中大文本类型的处理：
	Oracle中大文本数据类型，
		Clob    长文本类型   （MySQL中不支持，使用的是text）
		Blob    二进制类型	
	MySQL数据库，
		Text    长文本类型
		Blob    二进制类型	
	设置预编译：
		文本：
			prepareStatement.setCharacterStream(1, reader)
		字节：
			InputStream in = App_text.class.getResourceAsStream("7.jpg");
			prepareStatement.setBinaryStream(1, in);
	获取：
		文本：
			方式1：
				Reader r = ResultSet.getCharacterStream("字段名");
			方式2：
				ResultSet.getString("字段名")	
		字节：
			InputStream in = ResultSet.getBinaryStream("字段名");
BeanUtils组件
	程序中对javabean的操作很频繁， 所以apache提供了一套开源的api，方便对javabean的操作！即BeanUtils组件。
	BeanUtils组件，  作用是简化javabean的操作(原理是反射)
		注意1： 对于基本数据类型，会自动进行类型转换!
	使用BenUtils组件：
		1.引入commons-beanutils-1.8.3.jar核心包
		2.引入日志支持包: commons-logging-1.1.3.jar
			如果缺少日志jar文件，报错：java.lang.NoClassDefFoundError: org/apache/commons/logging/LogFactory
	方法1： 对象属性的拷贝
		BeanUtils.copyProperty(admin, "userName", "jack");
		BeanUtils.setProperty(admin, "age", 18);
	方法2： 对象的拷贝
		BeanUtils.copyProperties(newAdmin, admin);
	方法3： map数据拷贝到javabean中  
		BeanUtils.populate(adminMap, map);
		注意：map中的key要与javabean的属性名称一致
		
	